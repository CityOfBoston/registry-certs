Description: Webapp service bound to a public LB deployed from CodePipeline

Parameters:
  ShortName:
    Type: String
  Namespace:
    Type: String
  ConfigBucket:
    Type: String
  Tag:
    Type: String
    Default: latest
  DesiredCount:
    Type: Number
    Default: 0
  Cluster:
    Type: String
  Repository:
    Type: String
  TaskRoleArn:
    Type: String
  ServiceRoleArn:
    Type: String
  TargetGroupArn:
    Type: String

Resources:
  # Separate logs for each app
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/${Namespace}/${ShortName}'
      RetentionInDays: 90

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref 'AWS::StackName'
      TaskRoleArn: !Ref TaskRoleArn
      ContainerDefinitions:
        - Name: service
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}'
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Memory: 500
          MemoryReservation: 200
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: AWS_S3_CONFIG_URL
              Value: !Sub 's3://${ConfigBucket}/${ShortName}'
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  Service:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Ref 'AWS::StackName'
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      Role: !Ref ServiceRoleArn
      LoadBalancers:
        - ContainerName: service
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroupArn
