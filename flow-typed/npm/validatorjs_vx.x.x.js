// flow-typed signature: 2c72dc4fe9ab4a8bd62b10ad55d48897
// flow-typed version: <<STUB>>/validatorjs_v3.x.x/flow_v0.56.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'validatorjs'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'validatorjs' {
  declare export type Rule = string
    | {in: [number, number]}
    | {required_if: [string, any]};

  declare export type Rules = {[field: string]: Rule | Array<Rule>};

  // can be string, number, nested Object type, &c.
  declare export type Value = any;

  declare class Errors<R> {
    first(key: $Keys<R>): string;
    get(key: $Keys<R>): Array<string>;
    has(key: $Keys<R>): boolean;
    all(): {[key: $Keys<R>]: Array<string>};
    errorCount: number;
  }

  declare export default class Validator<R> {
    // Ensures that every rule in the fields appears in the input
    constructor(
      fields: $ObjMap<$Exact<R>, (k: any) => Value>,
      rules: R,
      customMessages?: {[string]: string}): this;

    setAttributeNames(names: {[$Keys<R>]: string}): void;

    check(): boolean;
    fails(): boolean;
    passes(): boolean;

    errors: Errors<R>;

    static register(
      name: string,
      callback: (value: mixed, requirement: any, attribute?: any) => boolean,
      errorMessage?: string): void;
  }
}
